version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-server
    ports:
      - "6333:6333"  # HTTP API + Web UI Dashboard
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main RAG Application
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: documind-rag:latest
    container_name: documind-rag-app
    ports:
      - "${APP_PORT:-8501}:8501"
    volumes:
      # Data persistence
      - ./data:/app/data:ro  # Read-only for security
      - feedback-data:/app/feedback_data  # Named volume for feedback
      - ./.env:/app/.env:ro  # Read-only env file
    environment:
      # Application settings
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      # Load env vars from .env file
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - QDRANT_URL=http://qdrant:6333
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY:-}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-documind-rag}
    depends_on:
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: documind-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - rag-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: documind-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./grafana-dashboard.json:/var/lib/grafana/dashboards/documind.json:ro
    depends_on:
      - prometheus
    networks:
      - rag-network
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  qdrant-data:
    driver: local
    name: documind-qdrant
  feedback-data:
    driver: local
    name: documind-feedback
  prometheus-data:
    driver: local
    name: documind-prometheus
  grafana-data:
    driver: local
    name: documind-grafana

# Network configuration
networks:
  rag-network:
    driver: bridge
    name: documind-network